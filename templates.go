package main

var Templates = `
{{define "objc/h"}}// Generated by github.com/sunfmin/goapigen
// DO NOT EDIT

#import <Foundation/Foundation.h>

@interface Error : NSObject
@end

@interface Validated : NSObject
@end

{{range .DataObjects}}{{$do := .}}
// --- {{.Name}} ---
@interface {{.Name}} : NSObject
{{range $do.Fields }}{{$f := .ToLanguageField "objc"}}@property {{$f.FullObjcTypeName}} {{$f.Name}};
{{end}}@end
{{end}}

// === Interfaces ===
{{range .Interfaces}}{{$interface := .}}
{{range .Methods}}
// --- {{.Name}}Result ---
@interface {{$interface.Name}}{{.Name}}Result : NSObject{{range .Results}}{{$f := .ToLanguageField "objc"}}
@property {{$f.FullObjcTypeName}} {{.Name | title}};{{end}}
@end
{{end}}

@interface {{.Name}} : NSObject
{{range .Methods}}- ({{$interface.Name}}{{.Name}}Result *) {{.ParamsForObjcFunction}};
{{end}}@end
{{end}}
{{end}}

{{define "objc/m"}}// Generated by github.com/sunfmin/goapigen
// DO NOT EDIT
#import "{{.Name}}.h"
{{range .DataObjects}}{{$do := .}}
// --- {{.Name}} ---
@implementation {{.Name}}
{{range $do.Fields }}{{$f := .ToLanguageField "objc"}}@synthesize {{$f.Name}} = _{{$f.Name}};
{{end}}@end
{{end}}

// === Interfaces ===

{{range .Interfaces}}{{$interface := .}}
@implementation {{.Name}} : NSObject
{{range .Methods}}
// --- {{.Name}} ---
- ({{$interface.Name}}{{.Name}}Result *) {{.ParamsForObjcFunction}} {
	return nil;
}
{{end}}@end
{{end}}


{{end}}


{{define "httpserver"}}// Generated by github.com/sunfmin/goapigen
// DO NOT EDIT
{{$pkg := .}}
package {{.Name}}httpimpl

import ({{range .ServerImports}}
	"{{.}}"{{end}}
)

var _ govalidations.Errors
var _ = time.Sunday

type CodeError interface {
	Code() string
}

type SerializableError struct {
	Code    string
	Message string
}

func (s *SerializableError) Error() string {
	return s.Message
}

func NewError(err error) (r error) {
	se := &SerializableError{Message:err.Error()}
	ce, yes := err.(CodeError)
	if yes {
		se.Code = ce.Code()
	}
	r = se
	return
}

func AddToMux(prefix string, mux *http.ServeMux) {
	{{range .Interfaces}}{{$interface := .}}{{range .Methods}}{{if .ConstructorForInterface}}{{else}}
	mux.HandleFunc(prefix+"/{{$interface.Name}}/{{.Name}}.json", {{$interface.Name}}_{{.Name}}){{end}}{{end}}{{end}}
	return
}
{{range .Interfaces}}{{$interface := .}}
{{with .Constructor}}{{else}}
var {{$interface.Name | downcase}} {{$pkg.Name}}.{{$interface.Name}} = {{$pkg.ImplPkg | dotlastname}}.Default{{$interface.Name}}{{end}}

type {{$interface.Name}}Data struct {
{{with .Constructor}}{{range .Method.Params}}	{{.Name | title}} {{.FullGoTypeName}}
{{end}}{{end}}}

{{range .Methods}}{{if .ConstructorForInterface}}{{else}}{{$method := .}}
type {{$interface.Name}}_{{$method.Name}}_Params struct {
{{with $interface.Constructor}}	This   {{$interface.Name}}Data
{{end}}	Params struct {
{{range .Params}}		{{.Name | title}} {{.FullGoTypeName}}
{{end}}	}
}

type {{$interface.Name}}_{{$method.Name}}_Results struct {
{{range .Results}}	{{.Name | title}} {{.FullGoTypeName}}
{{end}}
}

func {{$interface.Name}}_{{$method.Name}}(w http.ResponseWriter, r *http.Request) {
	var p {{$interface.Name}}_{{$method.Name}}_Params
	if r.Body == nil {
		panic("no body")
	}
	defer r.Body.Close()
	dec := json.NewDecoder(r.Body)
	err := dec.Decode(&p)
	var result {{$interface.Name}}_{{$method.Name}}_Results
	enc := json.NewEncoder(w)
	if err != nil {
		result.Err = NewError(err)
		enc.Encode(result)
		return
	}
{{if $interface.Constructor}}
	s, err := {{$interface.Constructor.FromInterface.Name | downcase }}.{{$interface.Constructor.Method.Name}}({{$interface.Constructor.Method.ParamsForGoServerConstructorFunction}})
{{else}}
	s := {{$interface.Name | downcase }}
{{end}}
	if err != nil {
		result.Err = NewError(err)
		enc.Encode(result)
		return
	}
	{{$method.ResultsForGoServerFunction "result"}} = s.{{$method.Name}}({{$method.ParamsForGoServerFunction}})
	err = enc.Encode(result)
	if err != nil {
		panic(err)
	}
	return
}
{{end}}{{end}}

{{end}}





{{end}}

{{define "javascript/interfaces"}}// Generated by github.com/sunfmin/goapigen
// DO NOT EDIT

(function(api, $, undefined ) {
	api.rpc = function(endpoint, input, callback) {
		var methodUrl = api.baseurl + endpoint;
		var message = JSON.stringify(input);
		var req = $.ajax({
			type: "POST",
			url: methodUrl,
			contentType:"application/json; charset=utf-8",
			dataType:"json",
			processData: false,
			data: message
		});
		req.done(function(data, textStatus, jqXHR) {
			callback(data);
		});
	};
})( window.{{.Name}} = window.{{.Name}} || {}, jQuery);



(function( api, undefined ) {
{{range .Interfaces}}{{ $interfaceName := .Name}}
	api.{{$interfaceName}} = function() {};
{{range .Methods}}{{$method := .}}{{if .ConstructorForInterface}}
	api.{{$interfaceName}}.prototype.{{.Name}} = function({{$method.ParamsForJavascriptFunction}}) {
		var r = new api.{{.ConstructorForInterface.Name}}(){{range .Params}};
		r.{{.Name | title}} = {{.Name}}{{end}};
		return r;
	}
{{else}}
	api.{{$interfaceName}}.prototype.{{.Name}} = function({{$method.ParamsForJavascriptFunction}}{{if $method.ParamsForJavascriptFunction}}, {{end}}callback) {
		api.rpc("/{{$interfaceName}}/{{.Name}}.json", {"This": this, "Params": {{$method.ParamsForJson}}}, function(data){
			callback({{$method.ResultsForJavascriptFunction "data"}})
		});
		return;
	}
{{end}}{{end}}{{end}}

}( window.{{.Name}} = window.{{.Name}} || {} ));

{{end}}

`
